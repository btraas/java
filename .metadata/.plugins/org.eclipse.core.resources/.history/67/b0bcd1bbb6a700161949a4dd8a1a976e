package ca.bcit.comp2526.a2b;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class HexCellTest {

	private World world;
	private HexCell testHexCell;
	
	@Before
	private void setup() {
		int worldSize = 25;
		int radius = 10;
		int size = worldSize;
		double ANGLE_30 = Math.toRadians(30);
		world = new World(worldSize, worldSize);
		
		double offX = Math.cos(ANGLE_30) * radius;
        double offY = Math.sin(ANGLE_30) * radius;
        int half = (int)(size * 0.5);
  
        for (int row = 0; row < size; row++) {

            // Check if even without using magic number 2
            //  If not even, use one less column for this row.
            int cols = ((row & 1) == 0) ? size : size - 1;
            for (int col = 0; col < cols; col++) {
                
            
                int valueX = (int) (origin.x + offX * (col * 2 + 1 - cols));
                int valueY = (int) (origin.y + offY * (row - half) * TRIPLE);
  
                drawHex(graphics, row, col, valueX, valueY, radius);
            }
        }
	}
	
	@Test
	public void testGetNearbyCells() {
		
		fail("Not yet implemented");
	}

	@Test
	public void testGetAdjacentCellsClassOfQArray() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetAdjacentCells() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetLives() {
		fail("Not yet implemented");
	}

	@Test
	public void testAddLife() {
		fail("Not yet implemented");
	}

	@Test
	public void testRemoveLife() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetLifeClassOfQ() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetLifeClassOfQArray() {
		fail("Not yet implemented");
	}

	@Test
	public void testHasClassOfQ() {
		fail("Not yet implemented");
	}

	@Test
	public void testHasClassOfQArray() {
		fail("Not yet implemented");
	}

}
