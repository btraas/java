package ca.bcit.comp2526.a2b;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import javafx.util.Pair;

/**
 * A Hex Cell. Both a Hexagon and a Cell object.
 * Used for a hex grid (opposed to a square grid).
 * 
 * @author Brayden Traas
 * @version 2016-11-02
 */
public class HexCell extends Cell {
   
    private static final String UNLIKE_TYPES = "Comparing unlike Cell types!!";

    private static final float HALF = 0.5f;
    
    
    private static final String TYPE_AT = "Cell @";
    
    
    protected Hexagon hex;
    
    /**
     * Instantiates a HexCell.
     * 
     * @param world this Cell belongs to.
     * @param row this Cell resides on.
     * @param col this Cell resides on.
     * @param valueX - true position x of this Hex.
     * @param valueY - true position y of this Hex.
     * @param radius of the Hexagon.
     */
    public HexCell(final World world, int row, int col, int valueX, int valueY, int radius) {
        hex = new Hexagon(new Point(valueX, valueY), radius);
        this.location = new Point(row, col);
        this.world = world;
    }
    
    

    
   
    /**
     * Updates the Life object in this Cell.
     * @param occupier to set
     */
    @Override
    public void addLife(final Life occupier) {
        super.addLife(occupier);
        hex.paint(lifeColor);
    }
    
    @Override
    public Dimension getSize() {
    	return new Dimension(hex.getRadius()*2, hex.getRadius() * 2);
    }
    
    /**
     * Gets the row this Cell is found in.
     * @return the row this Cell is found in.
     */
    @Override
    
  
    /**
     * Sets the row this Cell is found in.
     * @param row to set.
     */
    @Override
    
  
    
    /**
     * Gets the column this Cell is found in.
     * @return the column this Cell is found in.
     */
    @Override
    
  
    /**
     * Sets the column this Cell is found in.
     * @param column to set.
     */
    @Override
    
  
    /**
     * Gets the World this Cell belongs to.
     * @return world object.
     */
    @Override
    
  
    /**
     * Gets the closest Cell in the haystack to this Cell.
     * @param haystack - an array of Cell objects to search through.
     * @return Cell from the haystack that's closest.
     */
    @Override
    public Cell closest(final Cell[] haystack) {
        Cell needle = this;
        
        if (haystack.length == 0 || needle == null) {
            return null;
        } else if (!(haystack[0] instanceof HexCell) ) {
            return null;
        } else if (haystack.length == 1) {
            return haystack[0];
        }
       
        Point goal = needle.getLocation();
       
        Cell closest = haystack[0];
        double closestDistance = goal.distance(closest.getLocation());
       
        for (int i = 0; i < haystack.length; i++) {
          
            if (goal.distance(haystack[i].getLocation()) < closestDistance) {
                closest = haystack[i];
                closestDistance = goal.distance(closest.getLocation());
            }
       
        }
       
        return closest;
    }

    /**
     * Finds the distance between this Cell and another Cell.
     * @param other Cell to compare with.
     * @return distance (double) between the two.
     */
    @Override
    public double distance(final Cell other) {

        if (!(other instanceof HexCell)) {
            throw new RuntimeException(UNLIKE_TYPES);
        }
        
        if (this.getRow() == other.getRow() && this.getColumn() == other.getColumn()) {
            return 0.0;
        }
        
        double diffX = Math.abs(this.getRow() - other.getRow());
        
        
        // If on the same row
        if (this.getRow() == other.getRow()) {
            return Math.abs(this.getColumn() - other.getColumn());
        }
 
        Point otherTheoretical = new Point(other.getLocation());
        
        // If this is even and other isn't
        if ( (this.getRow() & 1) == 0 && (other.getRow() & 1) != 0) {
            
            if (this.getColumn() < other.getColumn()) {
                otherTheoretical.y--;
            }

        }
        
    
        // int distance = max(    
        int dist1 = (int)Math.ceil(1 - (other.getRow() * HALF)) + (int)other.getColumn();
        dist1 -= ((int)Math.ceil(1 - (this.getRow() * HALF)) + (int)this.getColumn());
        dist1 = Math.abs(dist1);
         
        int dist2 = -other.getRow() - (int)Math.ceil(1 - (other.getRow() * HALF)) 
                    - (int)other.getColumn();
        dist2 += this.getRow() + Math.ceil(1 - (this.getRow() * HALF)) + this.getColumn();
        dist2 = Math.abs(dist2);
          
        //System.out.println("\n diffX:"+diffX+" dist1:"+dist1+" dist2:"+dist2 );
        int distance = Math.max(Math.max(dist1, dist2), (int)diffX);
              
        //System.out.println("distance from "+this+" to "+other+" is "+distance);
        
        return distance;
         
    }

    @Override
    public void recolor() {
    	paint();
    }
    
    /**
     * Paints this Hexagon with its Occupier's Color.
     */
    public void paint() {
    	
    	 Life last = occupiers.size() == 0 ? null :
    		 occupiers.get(occupiers.size() - 1);
         
         // Get the new Color.
         Color color = last == null ? getEmptyColor() 
         		: last.getColor();
    	
       // if (color == emptyColor) System.out.println("setting empty color "+emptyColor);
        hex.paint(color);
    }
    
    /**
     * Gets the text to display on this Cell.
     * @return text to display.
     */
    @Override
    public String getText() {
    
    	Life occupier = occupiers.size() == 0 ? null : 
    		occupiers.get(occupiers.size() - 1);
    	
        if (World.SHOW_FOOD
            && occupier != null) {
          
            // Get food supply
            int supply = occupier.getLifeLeft();
            return "" + supply;
          
        } else if (World.SHOW_MOVES 
            && occupier != null && occupier instanceof Moveable) {

            Moveable<?> mover = (Moveable<?>)occupier;
          
            // Get types we can move into.
            Class<?>[] types = mover.getInvalidMoveToTypes();

            
            // Get the number of possible moves.
            int moves = mover.getMoveToPossibilities(
                types, mover.getMoveMin(), mover.getMoveMax()).length;
            return "" + moves;
        
        } else if (World.SHOW_COORDINATES) {
            
            // Simply ROWxCOL.
            return location.x + "," + location.y;
        }
      
        return " ";
      
    }
    
    public void setText(String text) {
    	
    }
    
    public void draw(final Graphics2D graphics, int valueX, int valueY, 
        int lineThickness, final Color colorValue, boolean filled) {
        
        hex.draw(graphics, valueX, valueY, lineThickness, colorValue, filled);
        
    }
    
    /**
     * Gets the String of this SquareCell object.
     * @return String representing this object.
     */
    @Override
    public String toString() {
        //String life = getLives().toString();
        //return TYPE_AT + getLocation().toString() + CONTAINS + life;
    	return TYPE_AT + getLocation().x + "," + getLocation().y;
    }

	
   
    
}

